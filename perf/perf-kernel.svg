<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="278.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="261" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="261" > </text>
<g id="frames">
<g >
<title>std::chrono::operator&gt;&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (3 samples, 0.31%)</title><rect x="1181.5" y="149" width="3.6" height="15.0" fill="rgb(216,74,25)" rx="2" ry="2" />
<text  x="1184.49" y="159.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (31 samples, 3.19%)</title><rect x="362.4" y="101" width="37.7" height="15.0" fill="rgb(223,13,12)" rx="2" ry="2" />
<text  x="365.42" y="111.5" >__v..</text>
</g>
<g >
<title>BusyWaitFor (719 samples, 74.05%)</title><rect x="265.2" y="149" width="873.8" height="15.0" fill="rgb(239,195,17)" rx="2" ry="2" />
<text  x="268.20" y="159.5" >BusyWaitFor</text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (25 samples, 2.57%)</title><rect x="724.6" y="85" width="30.3" height="15.0" fill="rgb(236,33,26)" rx="2" ry="2" />
<text  x="727.56" y="95.5" >st..</text>
</g>
<g >
<title>main (757 samples, 77.96%)</title><rect x="265.2" y="165" width="919.9" height="15.0" fill="rgb(208,172,44)" rx="2" ry="2" />
<text  x="268.20" y="175.5" >main</text>
</g>
<g >
<title>std::chrono::operator&lt; &lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (99 samples, 10.20%)</title><rect x="1007.7" y="117" width="120.3" height="15.0" fill="rgb(223,150,10)" rx="2" ry="2" />
<text  x="1010.71" y="127.5" >std::chrono::o..</text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (20 samples, 2.06%)</title><rect x="1149.9" y="149" width="24.3" height="15.0" fill="rgb(229,72,54)" rx="2" ry="2" />
<text  x="1152.90" y="159.5" >s..</text>
</g>
<g >
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, long, std::ratio&lt;1l, 1l&gt; &gt; (88 samples, 9.06%)</title><rect x="754.9" y="85" width="107.0" height="15.0" fill="rgb(250,156,39)" rx="2" ry="2" />
<text  x="757.94" y="95.5" >std::chrono::..</text>
</g>
<g >
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, long, std::ratio&lt;1l, 1l&gt; &gt; (15 samples, 1.54%)</title><rect x="906.8" y="101" width="18.3" height="15.0" fill="rgb(238,151,54)" rx="2" ry="2" />
<text  x="909.85" y="111.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (25 samples, 2.57%)</title><rect x="1077.0" y="85" width="30.4" height="15.0" fill="rgb(226,48,44)" rx="2" ry="2" />
<text  x="1079.98" y="95.5" >st..</text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::duration&lt;long, std::ratio&lt;1l, 1l&gt;, void&gt; (4 samples, 0.41%)</title><rect x="470.6" y="117" width="4.8" height="15.0" fill="rgb(223,209,23)" rx="2" ry="2" />
<text  x="473.58" y="127.5" ></text>
</g>
<g >
<title>busy_process (971 samples, 100.00%)</title><rect x="10.0" y="213" width="1180.0" height="15.0" fill="rgb(246,51,24)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >busy_process</text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt;::count (22 samples, 2.27%)</title><rect x="830.3" y="53" width="26.7" height="15.0" fill="rgb(246,117,1)" rx="2" ry="2" />
<text  x="833.29" y="63.5" >s..</text>
</g>
<g >
<title>[unknown] (50 samples, 5.15%)</title><rect x="351.5" y="133" width="60.7" height="15.0" fill="rgb(237,105,27)" rx="2" ry="2" />
<text  x="354.48" y="143.5" >[unkno..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (4 samples, 0.41%)</title><rect x="852.2" y="37" width="4.8" height="15.0" fill="rgb(236,151,30)" rx="2" ry="2" />
<text  x="855.16" y="47.5" ></text>
</g>
<g >
<title>[unknown] (971 samples, 100.00%)</title><rect x="10.0" y="197" width="1180.0" height="15.0" fill="rgb(251,75,24)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >[unknown]</text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (2 samples, 0.21%)</title><rect x="1038.1" y="101" width="2.4" height="15.0" fill="rgb(239,176,37)" rx="2" ry="2" />
<text  x="1041.09" y="111.5" ></text>
</g>
<g >
<title>WaitCounter::Increase (44 samples, 4.53%)</title><rect x="298.0" y="133" width="53.5" height="15.0" fill="rgb(233,113,28)" rx="2" ry="2" />
<text  x="301.01" y="143.5" >WaitC..</text>
</g>
<g >
<title>std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::ratio&lt;1000000000l, 1l&gt;, long, false, true&gt;::__cast&lt;long, std::ratio&lt;1l, 1l&gt; &gt; (6 samples, 0.62%)</title><rect x="717.3" y="85" width="7.3" height="15.0" fill="rgb(239,129,13)" rx="2" ry="2" />
<text  x="720.27" y="95.5" ></text>
</g>
<g >
<title>std::chrono::operator&lt; &lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (5 samples, 0.51%)</title><rect x="1001.6" y="117" width="6.1" height="15.0" fill="rgb(232,61,9)" rx="2" ry="2" />
<text  x="1004.64" y="127.5" ></text>
</g>
<g >
<title>std::chrono::operator+&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, long, std::ratio&lt;1l, 1l&gt; &gt; (460 samples, 47.37%)</title><rect x="419.5" y="133" width="559.0" height="15.0" fill="rgb(240,132,29)" rx="2" ry="2" />
<text  x="422.54" y="143.5" >std::chrono::operator+&lt;std::chrono::_V2::system_clock, std::chrono::duration..</text>
</g>
<g >
<title>__clock_gettime (3 samples, 0.31%)</title><rect x="1145.0" y="149" width="3.7" height="15.0" fill="rgb(241,24,13)" rx="2" ry="2" />
<text  x="1148.04" y="159.5" ></text>
</g>
<g >
<title>std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_since_epoch (8 samples, 0.82%)</title><rect x="1128.0" y="117" width="9.7" height="15.0" fill="rgb(206,31,1)" rx="2" ry="2" />
<text  x="1131.02" y="127.5" ></text>
</g>
<g >
<title>std::chrono::operator+&lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1l&gt; &gt; (366 samples, 37.69%)</title><rect x="480.3" y="117" width="444.8" height="15.0" fill="rgb(216,152,8)" rx="2" ry="2" />
<text  x="483.30" y="127.5" >std::chrono::operator+&lt;long, std::ratio&lt;1l, 1000000000l&gt;, lo..</text>
</g>
<g >
<title>std::chrono::operator+&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, long, std::ratio&lt;1l, 1l&gt; &gt; (3 samples, 0.31%)</title><rect x="1177.8" y="149" width="3.7" height="15.0" fill="rgb(253,164,13)" rx="2" ry="2" />
<text  x="1180.85" y="159.5" ></text>
</g>
<g >
<title>std::chrono::operator+&lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1l&gt; &gt; (6 samples, 0.62%)</title><rect x="412.2" y="133" width="7.3" height="15.0" fill="rgb(240,221,52)" rx="2" ry="2" />
<text  x="415.25" y="143.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (2 samples, 0.21%)</title><rect x="468.1" y="117" width="2.5" height="15.0" fill="rgb(249,92,45)" rx="2" ry="2" />
<text  x="471.15" y="127.5" ></text>
</g>
<g >
<title>std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_since_epoch (1 samples, 0.10%)</title><rect x="1137.7" y="133" width="1.3" height="15.0" fill="rgb(219,28,4)" rx="2" ry="2" />
<text  x="1140.74" y="143.5" ></text>
</g>
<g >
<title>std::chrono::operator&gt;&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (123 samples, 12.67%)</title><rect x="988.3" y="133" width="149.4" height="15.0" fill="rgb(240,215,11)" rx="2" ry="2" />
<text  x="991.27" y="143.5" >std::chrono::operat..</text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (53 samples, 5.46%)</title><rect x="566.6" y="101" width="64.4" height="15.0" fill="rgb(227,96,21)" rx="2" ry="2" />
<text  x="569.58" y="111.5" >std::ch..</text>
</g>
<g >
<title>__libc_start_main (757 samples, 77.96%)</title><rect x="265.2" y="181" width="919.9" height="15.0" fill="rgb(216,119,17)" rx="2" ry="2" />
<text  x="268.20" y="191.5" >__libc_start_main</text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::duration&lt;long, std::ratio&lt;1l, 1l&gt;, void&gt; (190 samples, 19.57%)</title><rect x="631.0" y="101" width="230.9" height="15.0" fill="rgb(244,206,15)" rx="2" ry="2" />
<text  x="633.99" y="111.5" >std::chrono::duration&lt;long, st..</text>
</g>
<g >
<title>std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_since_epoch (17 samples, 1.75%)</title><rect x="1107.4" y="101" width="20.6" height="15.0" fill="rgb(210,46,30)" rx="2" ry="2" />
<text  x="1110.36" y="111.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt;::count (4 samples, 0.41%)</title><rect x="857.0" y="69" width="4.9" height="15.0" fill="rgb(253,173,23)" rx="2" ry="2" />
<text  x="860.02" y="79.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::duration&lt;long, void&gt; (18 samples, 1.85%)</title><rect x="808.4" y="53" width="21.9" height="15.0" fill="rgb(250,170,28)" rx="2" ry="2" />
<text  x="811.41" y="63.5" >s..</text>
</g>
<g >
<title>[[kernel.kallsyms]] (3 samples, 0.31%)</title><rect x="1103.7" y="69" width="3.7" height="15.0" fill="rgb(220,188,36)" rx="2" ry="2" />
<text  x="1106.72" y="79.5" ></text>
</g>
<g >
<title>std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_point (11 samples, 1.13%)</title><rect x="925.1" y="117" width="13.3" height="15.0" fill="rgb(229,224,13)" rx="2" ry="2" />
<text  x="928.08" y="127.5" ></text>
</g>
<g >
<title>WaitCounter::Increase (5 samples, 0.51%)</title><rect x="1139.0" y="149" width="6.0" height="15.0" fill="rgb(254,215,15)" rx="2" ry="2" />
<text  x="1141.96" y="159.5" ></text>
</g>
<g >
<title>__clock_gettime (40 samples, 4.12%)</title><rect x="351.5" y="117" width="48.6" height="15.0" fill="rgb(222,133,47)" rx="2" ry="2" />
<text  x="354.48" y="127.5" >__cl..</text>
</g>
<g >
<title>__vdso_clock_gettime (10 samples, 1.03%)</title><rect x="400.1" y="117" width="12.1" height="15.0" fill="rgb(251,203,49)" rx="2" ry="2" />
<text  x="403.09" y="127.5" ></text>
</g>
<g >
<title>std::chrono::operator&lt; &lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (8 samples, 0.82%)</title><rect x="978.5" y="133" width="9.8" height="15.0" fill="rgb(247,163,34)" rx="2" ry="2" />
<text  x="981.55" y="143.5" ></text>
</g>
<g >
<title>std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::ratio&lt;1000000000l, 1l&gt;, long, false, true&gt;::__cast&lt;long, std::ratio&lt;1l, 1l&gt; &gt; (78 samples, 8.03%)</title><rect x="762.2" y="69" width="94.8" height="15.0" fill="rgb(234,182,30)" rx="2" ry="2" />
<text  x="765.23" y="79.5" >std::chrono..</text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now@plt (3 samples, 0.31%)</title><rect x="1174.2" y="149" width="3.6" height="15.0" fill="rgb(242,32,29)" rx="2" ry="2" />
<text  x="1177.20" y="159.5" ></text>
</g>
<g >
<title>__clock_gettime (210 samples, 21.63%)</title><rect x="10.0" y="181" width="255.2" height="15.0" fill="rgb(212,90,7)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >__clock_gettime</text>
</g>
<g >
<title>[[vdso]] (149 samples, 15.35%)</title><rect x="84.1" y="149" width="181.1" height="15.0" fill="rgb(252,107,10)" rx="2" ry="2" />
<text  x="87.13" y="159.5" >[[vdso]]</text>
</g>
<g >
<title>clock_gettime@plt (1 samples, 0.10%)</title><rect x="1148.7" y="149" width="1.2" height="15.0" fill="rgb(213,16,52)" rx="2" ry="2" />
<text  x="1151.68" y="159.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (4 samples, 0.41%)</title><rect x="1185.1" y="181" width="4.9" height="15.0" fill="rgb(211,124,8)" rx="2" ry="2" />
<text  x="1188.14" y="191.5" ></text>
</g>
<g >
<title>all (971 samples, 100%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(247,227,2)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_since_epoch (33 samples, 3.40%)</title><rect x="938.4" y="117" width="40.1" height="15.0" fill="rgb(213,189,32)" rx="2" ry="2" />
<text  x="941.44" y="127.5" >std..</text>
</g>
<g >
<title>__vdso_clock_gettime (205 samples, 21.11%)</title><rect x="16.1" y="165" width="249.1" height="15.0" fill="rgb(237,129,8)" rx="2" ry="2" />
<text  x="19.08" y="175.5" >__vdso_clock_gettime</text>
</g>
<g >
<title>[[kernel.kallsyms]] (3 samples, 0.31%)</title><rect x="408.6" y="101" width="3.6" height="15.0" fill="rgb(212,42,26)" rx="2" ry="2" />
<text  x="411.60" y="111.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::duration&lt;long, void&gt; (4 samples, 0.41%)</title><rect x="475.4" y="117" width="4.9" height="15.0" fill="rgb(206,61,24)" rx="2" ry="2" />
<text  x="478.44" y="127.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::duration&lt;long, void&gt; (37 samples, 3.81%)</title><rect x="861.9" y="101" width="44.9" height="15.0" fill="rgb(209,83,24)" rx="2" ry="2" />
<text  x="864.88" y="111.5" >std:..</text>
</g>
<g >
<title>std::chrono::operator&lt; &lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (55 samples, 5.66%)</title><rect x="1040.5" y="101" width="66.9" height="15.0" fill="rgb(214,67,27)" rx="2" ry="2" />
<text  x="1043.53" y="111.5" >std::ch..</text>
</g>
</g>
</svg>
